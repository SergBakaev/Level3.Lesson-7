import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Comparator;

public class Main {

    public static void main(String[] args) throws Exception {

        Class mc = MyClass.class;
        Object testObj = mc.newInstance();

        Method[] methods = mc.getDeclaredMethods();
        ArrayList<Method> metodAll = new ArrayList<>();
        Method beforeMethod = null;
        Method afterMethod = null;

        for (Method m : mc.getDeclaredMethods() ) {
            if (m.isAnnotationPresent(Test.class)) {
               metodAll.add(m);
            }
            if (m.isAnnotationPresent(BeforeSuite.class)) {
                if (beforeMethod == null) beforeMethod = m;
                else throw new RuntimeException("Больше одного метода с аннотацией BeforeSuite");
            }
            if (m.isAnnotationPresent(AfterSuite.class)) {
                if (afterMethod == null) afterMethod = m;
                else throw new RuntimeException("Больше одного метода с аннотацией AfterSuite");
            }
            metodAll.sort(new Comparator<Method>() {
                @Override
                public int compare(Method o1, Method o2) {
                    return o2.getAnnotation(Test.class).priority() - o1.getAnnotation(Test.class).priority();
                }
            });
        }
        if (beforeMethod != null) beforeMethod.invoke(testObj, null);
        for (Method o : metodAll) o.invoke(testObj, null);
        if (afterMethod != null) afterMethod.invoke(testObj, null);

    }
}
